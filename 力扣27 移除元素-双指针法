题目如下：
给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。

不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并原地修改输入数组。

元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

示例 1: 给定 nums = [3,2,2,3], val = 3, 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 你不需要考虑数组中超出新长度后面的元素。

示例 2: 给定 nums = [0,1,2,2,3,0,4,2], val = 2, 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。


我第一次尝试写的代码：
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int j=nums.size()-1;
        for(int i=0;i<nums.size();i++){
            if(val == nums[i]){
                nums[i] = nums[j];
                nums[j] = val;
                j--;
            }

        }
        for(int i=nums.size()-1;i>j;i--){
            nums.pop_back();
        }
    return j;
    }
};
运行之后发现   在以[3,2,2,3],val=3，的时候输出是[3,2],这里的最后一个也是val。导致在交换的时候 ，实质上并没有移除元素。

给的答案 暴力枚举的方法：假如发现是val ，就用后面的值将前面的覆盖掉，将数组后面的部分整体像前面移一个  运行之后时间复杂度太高了

// 时间复杂度：O(n^2)
// 空间复杂度：O(1)
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int size = nums.size();
        for (int i = 0; i < size; i++) {
            if (nums[i] == val) { // 发现需要移除的元素，就将数组集体向前移动一位
                for (int j = i + 1; j < size; j++) {
                    nums[j - 1] = nums[j];
                }
                i--; // *********因为下标i以后的数值都向前移动了一位，所以i也向前移动一位*********
                size--; // 此时数组的大小-1
            }
        }
        return size;

    }
};


第二种方法：双指针法
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int j=nums.size()-1;
        for(int i=0;i<=j;i++){
            if(val == nums[i]){
              nums[i]=nums[j];
              i--;      //*******这里需要注意要将i--；因为这时候的miuns[i]已经被换了，这个nums[i]也还有可能是val值
              j--;
            }

    return j+1;
    }
};

双指针法（快慢指针法）： 通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。     ****这是一种非常重要的思想  ！！双指针！！

定义快慢指针

快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组
慢指针：指向更新 新数组下标的位置

// 时间复杂度：O(n)
// 空间复杂度：O(1)
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int slowIndex = 0;
        for (int fastIndex = 0; fastIndex < nums.size(); fastIndex++) {
            if (val != nums[fastIndex]) {
                nums[slowIndex++] = nums[fastIndex];
            }
        }
        return slowIndex;
    }
};
这里其实相当于用了两个指针对应了两个数组，只不过这两个数组存在一片内存地址上，两个指针从同一个方向向前走，遇到不要的值快指针就往前跳过，不复制给慢指针。









