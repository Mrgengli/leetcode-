寻找一个字符串中的最长回文字符串

第一种解法：中心扩散法
class Solution {
public:
    string longestPalindrome(string s) {
        int start = 0, end = 0; // 最长回文子串的起始和终止位置
        int n = s.size();
        for (int i = 0; i < n; i++) { // 枚举s中的每个位置i
            // 以字符s[i]为中心扩展，计算以s[i]为中心的最长回文子串的长度
            int len1 = expandAroundCenter(s, i, i);
            // 以字符s[i]和s[i+1]之间的空隙为中心扩展，计算以该空隙为中心的最长回文子串的长度
            int len2 = expandAroundCenter(s, i, i + 1);
            int len = max(len1, len2); // 取最长回文子串的长度
            if (len > end - start) { // 如果当前回文子串比已知的最长回文子串更长
                start = i - (len - 1) / 2; // 更新最长回文子串的起始位置
                end = i + len / 2; // 更新最长回文子串的终止位置
            }
        }
        return s.substr(start, end - start + 1); // 返回最长回文子串
    }

private:
    // 函数接收一个字符串s和两个下标left、right，返回以s[left]和s[right]为中心的最长回文子串的长度
    int expandAroundCenter(string s, int left, int right) {
        int n = s.size();
        while (left >= 0 && right < n && s[left] == s[right]) { // 不断扩展左右指针，直到不能再扩展为止
            left--; // 左指针向左移动
            right++; // 右指针向右移动
        }
        return right - left - 1; // 返回最长回文子串的长度
    }



我第一次看完答案后写的代码：
class Solution {
public:
    string longestPalindrome(string s) {
        // 中心扩散法
        // 先定义一个中心扩散的函数，有两种中心扩散的
        //一种以s中的某个字符为中心扩散
        //一种以s中的两个字符的中心的空隙为中心扩散
        if(s.empty()) return "";
        int len1=0;
        int len2=0;
        int start = 0;
        int end = 0;
        for(int i=0;i<s.size();i++){
        len1 = expandaroundCenter(s,i,i);
        len2 = expandaroundCenter(s,i,i+1);
        int len = max(len1,len2);
        if(len > end - start + 1){
            if(len%2 != 0){
             start = i-len/2;
             end = i+len/2;
             }
            else{ 
                start = i-len/2-1;
                end = i+len/2;
             }
        }  
        }
        
        return s.substr(start , end - start + 1);

    }

private:
    int expandaroundCenter(const string &s,int left,int right){
        while(left>=0 && right<s.size() && s[left]==s[right]){
            left--;
            right++;
        }
        return right-left-1;
    }
};


第二中方法：动态规划方法
